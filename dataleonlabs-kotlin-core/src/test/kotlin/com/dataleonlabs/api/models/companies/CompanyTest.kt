// File generated from our OpenAPI spec by Stainless.

package com.dataleonlabs.api.models.companies

import com.dataleonlabs.api.core.JsonValue
import com.dataleonlabs.api.core.jsonMapper
import com.dataleonlabs.api.models.companies.documents.GenericDocument
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class CompanyTest {

    @Test
    fun create() {
        val company =
            Company.builder()
                .addAmlSuspicion(
                    AmlSuspicion.builder()
                        .caption("Suspicious activity")
                        .country("FR")
                        .gender("M")
                        .relation("linked")
                        .schema("v1")
                        .score(0.85f)
                        .source("https://aml-checker.example.com/api/v1/suspicion/12345")
                        .status(AmlSuspicion.Status.PENDING)
                        .type(AmlSuspicion.Type.PEP)
                        .build()
                )
                .certificat(
                    Certificat.builder()
                        .id("cert_123")
                        .createdAt(OffsetDateTime.parse("2025-05-01T12:00:00Z"))
                        .filename("certificate.pdf")
                        .build()
                )
                .addCheck(
                    Check.builder()
                        .masked(false)
                        .message("Name matched successfully")
                        .name("name_match")
                        .validate(true)
                        .weight(1L)
                        .build()
                )
                .company(
                    Company.InnerCompany.builder()
                        .address("123 Rue de Paris, 75001 Paris, France")
                        .closureDate(LocalDate.parse("2025-12-31"))
                        .commercialName("ACME")
                        .contact(
                            Company.InnerCompany.Contact.builder()
                                .department("Finance")
                                .email("alice.martin@example.com")
                                .firstName("Alice")
                                .lastName("Martin")
                                .phoneNumber("+33 1 23 45 67 89")
                                .build()
                        )
                        .country("FR")
                        .email("contact@acme.com")
                        .employees(42L)
                        .employerIdentificationNumber("EIN987654321")
                        .insolvencyExists(false)
                        .insolvencyOngoing(false)
                        .legalForm("LLC")
                        .name("ACME Corp")
                        .phoneNumber("+33 1 23 45 67 89")
                        .registrationDate(LocalDate.parse("2010-05-20"))
                        .registrationId("123456789")
                        .shareCapital("100000 EUR")
                        .status("active")
                        .taxIdentificationNumber("FR123456789")
                        .type("main")
                        .websiteUrl("https://www.acme.com")
                        .build()
                )
                .addDocument(
                    GenericDocument.builder()
                        .id("doc_123")
                        .addCheck(
                            Check.builder()
                                .masked(false)
                                .message("Name matched successfully")
                                .name("name_match")
                                .validate(true)
                                .weight(1L)
                                .build()
                        )
                        .createdAt(OffsetDateTime.parse("2025-05-01T12:00:00Z"))
                        .documentType("generic")
                        .name("generic_doc")
                        .signedUrl("https://cdn.example.com/doc.pdf")
                        .state("SUBMITTED")
                        .status("approved")
                        .addTable(
                            GenericDocument.Table.builder()
                                .addOperation(JsonValue.from(mapOf<String, Any>()))
                                .build()
                        )
                        .addValue(
                            GenericDocument.Value.builder()
                                .confidence(0.95)
                                .name("Full Name")
                                .addValue(100L)
                                .addValue(200L)
                                .build()
                        )
                        .build()
                )
                .addMember(
                    Company.Member.builder()
                        .id("123e4567-e89b-12d3-a456-426614174000")
                        .address("456 Avenue de Lyon, 69000 Lyon, France")
                        .birthday(OffsetDateTime.parse("1980-06-15T00:00:00.000000+00:00"))
                        .birthplace("Paris")
                        .country("FR")
                        .addDocument(
                            GenericDocument.builder()
                                .id("doc_123")
                                .addCheck(
                                    Check.builder()
                                        .masked(false)
                                        .message("Name matched successfully")
                                        .name("name_match")
                                        .validate(true)
                                        .weight(1L)
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2025-05-01T12:00:00Z"))
                                .documentType("generic")
                                .name("generic_doc")
                                .signedUrl("https://cdn.example.com/doc.pdf")
                                .state("SUBMITTED")
                                .status("approved")
                                .addTable(
                                    GenericDocument.Table.builder()
                                        .addOperation(JsonValue.from(mapOf<String, Any>()))
                                        .build()
                                )
                                .addValue(
                                    GenericDocument.Value.builder()
                                        .confidence(0.95)
                                        .name("Full Name")
                                        .addValue(100L)
                                        .addValue(200L)
                                        .build()
                                )
                                .build()
                        )
                        .email("john.doe@example.com")
                        .firstName("John")
                        .isBeneficialOwner(true)
                        .isDelegator(false)
                        .lastName("Doe")
                        .livenessVerification(true)
                        .name("ACME Corp")
                        .ownershipPercentage(50L)
                        .phoneNumber("+33 1 23 45 67 89")
                        .postalCode("69000")
                        .registrationId("987654321")
                        .relation("shareholder")
                        .roles("legal_representative")
                        .source(Company.Member.Source.USER)
                        .state("PROCESSED")
                        .status("approved")
                        .type(Company.Member.Type.PERSON)
                        .workspaceId("wk_123")
                        .build()
                )
                .portalUrl("https://portal.dataleon.ai/e/123")
                .addProperty(
                    Property.builder()
                        .name("property_name")
                        .type("string")
                        .value("property_value")
                        .build()
                )
                .risk(Risk.builder().code("20030").reason("Document mismatch").score(0.92f).build())
                .sourceId("src-001")
                .technicalData(
                    TechnicalData.builder()
                        .activeAmlSuspicions(false)
                        .apiVersion(2L)
                        .approvedAt(OffsetDateTime.parse("2025-05-01T12:00:00Z"))
                        .callbackUrl("https://example.com/callback")
                        .callbackUrlNotification("https://example.com/notify")
                        .disableNotification(false)
                        .disableNotificationDate(OffsetDateTime.parse("2025-07-12T13:10:00Z"))
                        .exportType("json")
                        .finishedAt(OffsetDateTime.parse("2025-05-05T13:10:00Z"))
                        .ip("192.168.1.1")
                        .language("fra")
                        .locationIp("203.0.113.45")
                        .needReviewAt(null)
                        .notificationConfirmation(false)
                        .qrCode("false")
                        .rawData(true)
                        .rejectedAt(null)
                        .sessionDuration(45L)
                        .startedAt(OffsetDateTime.parse("2025-05-05T13:00:00Z"))
                        .transferAt(OffsetDateTime.parse("2025-07-12T14:00:00Z"))
                        .transferMode("API")
                        .build()
                )
                .webviewUrl("https://id.dataleon.ai/e/123")
                .build()

        assertThat(company.amlSuspicions())
            .containsExactly(
                AmlSuspicion.builder()
                    .caption("Suspicious activity")
                    .country("FR")
                    .gender("M")
                    .relation("linked")
                    .schema("v1")
                    .score(0.85f)
                    .source("https://aml-checker.example.com/api/v1/suspicion/12345")
                    .status(AmlSuspicion.Status.PENDING)
                    .type(AmlSuspicion.Type.PEP)
                    .build()
            )
        assertThat(company.certificat())
            .isEqualTo(
                Certificat.builder()
                    .id("cert_123")
                    .createdAt(OffsetDateTime.parse("2025-05-01T12:00:00Z"))
                    .filename("certificate.pdf")
                    .build()
            )
        assertThat(company.checks())
            .containsExactly(
                Check.builder()
                    .masked(false)
                    .message("Name matched successfully")
                    .name("name_match")
                    .validate(true)
                    .weight(1L)
                    .build()
            )
        assertThat(company.company())
            .isEqualTo(
                Company.InnerCompany.builder()
                    .address("123 Rue de Paris, 75001 Paris, France")
                    .closureDate(LocalDate.parse("2025-12-31"))
                    .commercialName("ACME")
                    .contact(
                        Company.InnerCompany.Contact.builder()
                            .department("Finance")
                            .email("alice.martin@example.com")
                            .firstName("Alice")
                            .lastName("Martin")
                            .phoneNumber("+33 1 23 45 67 89")
                            .build()
                    )
                    .country("FR")
                    .email("contact@acme.com")
                    .employees(42L)
                    .employerIdentificationNumber("EIN987654321")
                    .insolvencyExists(false)
                    .insolvencyOngoing(false)
                    .legalForm("LLC")
                    .name("ACME Corp")
                    .phoneNumber("+33 1 23 45 67 89")
                    .registrationDate(LocalDate.parse("2010-05-20"))
                    .registrationId("123456789")
                    .shareCapital("100000 EUR")
                    .status("active")
                    .taxIdentificationNumber("FR123456789")
                    .type("main")
                    .websiteUrl("https://www.acme.com")
                    .build()
            )
        assertThat(company.documents())
            .containsExactly(
                GenericDocument.builder()
                    .id("doc_123")
                    .addCheck(
                        Check.builder()
                            .masked(false)
                            .message("Name matched successfully")
                            .name("name_match")
                            .validate(true)
                            .weight(1L)
                            .build()
                    )
                    .createdAt(OffsetDateTime.parse("2025-05-01T12:00:00Z"))
                    .documentType("generic")
                    .name("generic_doc")
                    .signedUrl("https://cdn.example.com/doc.pdf")
                    .state("SUBMITTED")
                    .status("approved")
                    .addTable(
                        GenericDocument.Table.builder()
                            .addOperation(JsonValue.from(mapOf<String, Any>()))
                            .build()
                    )
                    .addValue(
                        GenericDocument.Value.builder()
                            .confidence(0.95)
                            .name("Full Name")
                            .addValue(100L)
                            .addValue(200L)
                            .build()
                    )
                    .build()
            )
        assertThat(company.members())
            .containsExactly(
                Company.Member.builder()
                    .id("123e4567-e89b-12d3-a456-426614174000")
                    .address("456 Avenue de Lyon, 69000 Lyon, France")
                    .birthday(OffsetDateTime.parse("1980-06-15T00:00:00.000000+00:00"))
                    .birthplace("Paris")
                    .country("FR")
                    .addDocument(
                        GenericDocument.builder()
                            .id("doc_123")
                            .addCheck(
                                Check.builder()
                                    .masked(false)
                                    .message("Name matched successfully")
                                    .name("name_match")
                                    .validate(true)
                                    .weight(1L)
                                    .build()
                            )
                            .createdAt(OffsetDateTime.parse("2025-05-01T12:00:00Z"))
                            .documentType("generic")
                            .name("generic_doc")
                            .signedUrl("https://cdn.example.com/doc.pdf")
                            .state("SUBMITTED")
                            .status("approved")
                            .addTable(
                                GenericDocument.Table.builder()
                                    .addOperation(JsonValue.from(mapOf<String, Any>()))
                                    .build()
                            )
                            .addValue(
                                GenericDocument.Value.builder()
                                    .confidence(0.95)
                                    .name("Full Name")
                                    .addValue(100L)
                                    .addValue(200L)
                                    .build()
                            )
                            .build()
                    )
                    .email("john.doe@example.com")
                    .firstName("John")
                    .isBeneficialOwner(true)
                    .isDelegator(false)
                    .lastName("Doe")
                    .livenessVerification(true)
                    .name("ACME Corp")
                    .ownershipPercentage(50L)
                    .phoneNumber("+33 1 23 45 67 89")
                    .postalCode("69000")
                    .registrationId("987654321")
                    .relation("shareholder")
                    .roles("legal_representative")
                    .source(Company.Member.Source.USER)
                    .state("PROCESSED")
                    .status("approved")
                    .type(Company.Member.Type.PERSON)
                    .workspaceId("wk_123")
                    .build()
            )
        assertThat(company.portalUrl()).isEqualTo("https://portal.dataleon.ai/e/123")
        assertThat(company.properties())
            .containsExactly(
                Property.builder()
                    .name("property_name")
                    .type("string")
                    .value("property_value")
                    .build()
            )
        assertThat(company.risk())
            .isEqualTo(
                Risk.builder().code("20030").reason("Document mismatch").score(0.92f).build()
            )
        assertThat(company.sourceId()).isEqualTo("src-001")
        assertThat(company.technicalData())
            .isEqualTo(
                TechnicalData.builder()
                    .activeAmlSuspicions(false)
                    .apiVersion(2L)
                    .approvedAt(OffsetDateTime.parse("2025-05-01T12:00:00Z"))
                    .callbackUrl("https://example.com/callback")
                    .callbackUrlNotification("https://example.com/notify")
                    .disableNotification(false)
                    .disableNotificationDate(OffsetDateTime.parse("2025-07-12T13:10:00Z"))
                    .exportType("json")
                    .finishedAt(OffsetDateTime.parse("2025-05-05T13:10:00Z"))
                    .ip("192.168.1.1")
                    .language("fra")
                    .locationIp("203.0.113.45")
                    .needReviewAt(null)
                    .notificationConfirmation(false)
                    .qrCode("false")
                    .rawData(true)
                    .rejectedAt(null)
                    .sessionDuration(45L)
                    .startedAt(OffsetDateTime.parse("2025-05-05T13:00:00Z"))
                    .transferAt(OffsetDateTime.parse("2025-07-12T14:00:00Z"))
                    .transferMode("API")
                    .build()
            )
        assertThat(company.webviewUrl()).isEqualTo("https://id.dataleon.ai/e/123")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val company =
            Company.builder()
                .addAmlSuspicion(
                    AmlSuspicion.builder()
                        .caption("Suspicious activity")
                        .country("FR")
                        .gender("M")
                        .relation("linked")
                        .schema("v1")
                        .score(0.85f)
                        .source("https://aml-checker.example.com/api/v1/suspicion/12345")
                        .status(AmlSuspicion.Status.PENDING)
                        .type(AmlSuspicion.Type.PEP)
                        .build()
                )
                .certificat(
                    Certificat.builder()
                        .id("cert_123")
                        .createdAt(OffsetDateTime.parse("2025-05-01T12:00:00Z"))
                        .filename("certificate.pdf")
                        .build()
                )
                .addCheck(
                    Check.builder()
                        .masked(false)
                        .message("Name matched successfully")
                        .name("name_match")
                        .validate(true)
                        .weight(1L)
                        .build()
                )
                .company(
                    Company.InnerCompany.builder()
                        .address("123 Rue de Paris, 75001 Paris, France")
                        .closureDate(LocalDate.parse("2025-12-31"))
                        .commercialName("ACME")
                        .contact(
                            Company.InnerCompany.Contact.builder()
                                .department("Finance")
                                .email("alice.martin@example.com")
                                .firstName("Alice")
                                .lastName("Martin")
                                .phoneNumber("+33 1 23 45 67 89")
                                .build()
                        )
                        .country("FR")
                        .email("contact@acme.com")
                        .employees(42L)
                        .employerIdentificationNumber("EIN987654321")
                        .insolvencyExists(false)
                        .insolvencyOngoing(false)
                        .legalForm("LLC")
                        .name("ACME Corp")
                        .phoneNumber("+33 1 23 45 67 89")
                        .registrationDate(LocalDate.parse("2010-05-20"))
                        .registrationId("123456789")
                        .shareCapital("100000 EUR")
                        .status("active")
                        .taxIdentificationNumber("FR123456789")
                        .type("main")
                        .websiteUrl("https://www.acme.com")
                        .build()
                )
                .addDocument(
                    GenericDocument.builder()
                        .id("doc_123")
                        .addCheck(
                            Check.builder()
                                .masked(false)
                                .message("Name matched successfully")
                                .name("name_match")
                                .validate(true)
                                .weight(1L)
                                .build()
                        )
                        .createdAt(OffsetDateTime.parse("2025-05-01T12:00:00Z"))
                        .documentType("generic")
                        .name("generic_doc")
                        .signedUrl("https://cdn.example.com/doc.pdf")
                        .state("SUBMITTED")
                        .status("approved")
                        .addTable(
                            GenericDocument.Table.builder()
                                .addOperation(JsonValue.from(mapOf<String, Any>()))
                                .build()
                        )
                        .addValue(
                            GenericDocument.Value.builder()
                                .confidence(0.95)
                                .name("Full Name")
                                .addValue(100L)
                                .addValue(200L)
                                .build()
                        )
                        .build()
                )
                .addMember(
                    Company.Member.builder()
                        .id("123e4567-e89b-12d3-a456-426614174000")
                        .address("456 Avenue de Lyon, 69000 Lyon, France")
                        .birthday(OffsetDateTime.parse("1980-06-15T00:00:00.000000+00:00"))
                        .birthplace("Paris")
                        .country("FR")
                        .addDocument(
                            GenericDocument.builder()
                                .id("doc_123")
                                .addCheck(
                                    Check.builder()
                                        .masked(false)
                                        .message("Name matched successfully")
                                        .name("name_match")
                                        .validate(true)
                                        .weight(1L)
                                        .build()
                                )
                                .createdAt(OffsetDateTime.parse("2025-05-01T12:00:00Z"))
                                .documentType("generic")
                                .name("generic_doc")
                                .signedUrl("https://cdn.example.com/doc.pdf")
                                .state("SUBMITTED")
                                .status("approved")
                                .addTable(
                                    GenericDocument.Table.builder()
                                        .addOperation(JsonValue.from(mapOf<String, Any>()))
                                        .build()
                                )
                                .addValue(
                                    GenericDocument.Value.builder()
                                        .confidence(0.95)
                                        .name("Full Name")
                                        .addValue(100L)
                                        .addValue(200L)
                                        .build()
                                )
                                .build()
                        )
                        .email("john.doe@example.com")
                        .firstName("John")
                        .isBeneficialOwner(true)
                        .isDelegator(false)
                        .lastName("Doe")
                        .livenessVerification(true)
                        .name("ACME Corp")
                        .ownershipPercentage(50L)
                        .phoneNumber("+33 1 23 45 67 89")
                        .postalCode("69000")
                        .registrationId("987654321")
                        .relation("shareholder")
                        .roles("legal_representative")
                        .source(Company.Member.Source.USER)
                        .state("PROCESSED")
                        .status("approved")
                        .type(Company.Member.Type.PERSON)
                        .workspaceId("wk_123")
                        .build()
                )
                .portalUrl("https://portal.dataleon.ai/e/123")
                .addProperty(
                    Property.builder()
                        .name("property_name")
                        .type("string")
                        .value("property_value")
                        .build()
                )
                .risk(Risk.builder().code("20030").reason("Document mismatch").score(0.92f).build())
                .sourceId("src-001")
                .technicalData(
                    TechnicalData.builder()
                        .activeAmlSuspicions(false)
                        .apiVersion(2L)
                        .approvedAt(OffsetDateTime.parse("2025-05-01T12:00:00Z"))
                        .callbackUrl("https://example.com/callback")
                        .callbackUrlNotification("https://example.com/notify")
                        .disableNotification(false)
                        .disableNotificationDate(OffsetDateTime.parse("2025-07-12T13:10:00Z"))
                        .exportType("json")
                        .finishedAt(OffsetDateTime.parse("2025-05-05T13:10:00Z"))
                        .ip("192.168.1.1")
                        .language("fra")
                        .locationIp("203.0.113.45")
                        .needReviewAt(null)
                        .notificationConfirmation(false)
                        .qrCode("false")
                        .rawData(true)
                        .rejectedAt(null)
                        .sessionDuration(45L)
                        .startedAt(OffsetDateTime.parse("2025-05-05T13:00:00Z"))
                        .transferAt(OffsetDateTime.parse("2025-07-12T14:00:00Z"))
                        .transferMode("API")
                        .build()
                )
                .webviewUrl("https://id.dataleon.ai/e/123")
                .build()

        val roundtrippedCompany =
            jsonMapper.readValue(jsonMapper.writeValueAsString(company), jacksonTypeRef<Company>())

        assertThat(roundtrippedCompany).isEqualTo(company)
    }
}
